# Training Configuration
train_params:
  exp_name: lego            # if not given, use name of this file as exp_name
  num_epochs: 2000
  num_epochs_focus_bbox:    # focus on main part first
  num_random: 4096          # rays per iter, default=32*32*4
  lr: 0.0005                # learning rate, default=5e-4
  lr_decay: 250             # exponential learning rate decay (in 1000 steps)
  eval_interval: 50000      # evaluate iterval by iteration (not epoch)

  # Loss Configuration
  loss_weights:
    mse: 1.
    mse0: 1.                # coarse weight if fine_network exists

  # Logging Configuration
  logging_params:
    log_dir: ./logs/          
    save_best_ckpt_only: True 

# Model Configuration
model_params:
  model_type: Voxel
  ckpt_path: ./logs/lego-voxel/DVGORender.pth  # if given, will load checkpoint then continue training/rendering
  net_chunk: 65536          # 1024*64
  use_viewdirs: True          # temporary duplicate to be compatable with NeRF
  # -- voxel --
  coarse_voxel:
    pervoxel_lr: False          # lr for each voxel depends on view counts
    num_voxels: 1024000         # expected number of voxel
    num_voxels_base: 1024000    # to rescale delta distance
    density_grid_params:
      type: DenseGrid
      channels: 1
    use_densitynet: False       # if False, density_grid_params.channels=1
    densitynet_params:
      depth: 
      width: 
      skips: []
    color_grid_params:
      type: DenseGrid
      channels: 12
    use_colornet: True          # if False, color_grid_params.channels=3
    colornet_params:
      color_emission: True # view-dependent color emission
      depth: 3
      width: 128
      skips: []
      use_viewdirs: True
      viewdirs_embedder:
        use_pos_embed: True     # if false, will use nn.Identity()
        include_input: True
        input_dims: 3
        multires: 4             # log2 of max freq for positional encoding (2D direction)
        log_sampling: True
    
# Render Configuration
render_params:
  near: 2.0
  far: 6.0
  ray_chunk: 32768        # 1024*32 number of rays processed in parallel, decrease if running out of memory
  stepsize: 0.5           # sampling stepsize in volume rendering
  alpha_init: 0.000001    # set the alpha values everywhere at the begin of training
  lindisp: False          # sampling linearly in disparity rather than depth
  perturb: True           # set to False for no jitter, True for jitter
  num_samples: 64         # number of coarse samples per ray
  num_importance: 64      # number of additional fine samples per ray
  raw_noise_std: 0.       # std dev of noise added to regularize sigma_a output, 1e0 recommended


# Dataset Configuration
dataset_params:
  dataset_type: blender
  root_dir: ./data/nerf_synthetic/lego
  white_bkgd: True
  ndc: False
  flip_x: False           # Set True to support co3d
  flip_y: False           # Set True to support co3d
  inverse_y: False        # Set True to support blendedmvs, nsvf, tankstemple
  fps: 25
  # Below are unbounded inward-facing specific settings.
  unbounded_inward: False
  unbounded_inner_r: 1.0